// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  pseudo  String 
  motdepasse String      
}


model Instrument {
  id              Int        @id @default(autoincrement())
  name            String
  poids           Int
  couleur         String
  prix            Int 
  reparations     Reparation[]
}

model Reparation {
  id              Int        @id @default(autoincrement())
  name            String
  prix            Int 
  instrument      Instrument @relation(fields: [instrumentId], references: [id]) 
  instrumentId    Int
}


model Banane {
  id              Int        @id @default(autoincrement())
  couleur         String?
  prix            Decimal
}








// // GROUP ET STUDENT FORME STUDENTGROUP MANY TO MANY
// model Student {
//   id        Int        @id @default(autoincrement())
//   lastname     String
//   firstname    String
//   age          Int
//   classRoom    ClassRoom? @relation(fields: [classRoomId], references: [id]) //Relation One to many un etudiant appartient Ã  une classe
//   classRoomId   Int //Relation One to many
//   studentGroups StudentGroup[]
// }

// model StudentGroup {
//   studentId   Int 
//   groupId      Int
//   student     Student  @relation(fields: [studentId], references: [id])
//   group       Group    @relation(fields: [groupId], references: [id])

//   @@id([groupId, studentId])
// }


// model Group {
//   id        Int        @id @default(autoincrement())
//   name     String 
  

//   StudentGroup StudentGroup[]
// }

// //ONE TO MANY ONE COTE STUDENT ET MANY COTE CLASSROOM
// model ClassRoom {
//   id        Int        @id @default(autoincrement())
//   name     String 
//   Students Student [] //Relation One to many une classe possede plusieur etudiants
// }


// model User {
//   id        Int        @id @default(autoincrement())
//   lastname  String 
//   firstname String
//   email     String     
//   mtp       String      
// }


// //ONE TO ONE
// // model User {
// //   id      Int      @id @default(autoincrement())
// //   profile Profile?   // ? c'est relation 0
// // }

// // model Profile {
// //   id     Int  @id @default(autoincrement())
// //   user   User @relation(fields: [userId], references: [id])
// //   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// // }
